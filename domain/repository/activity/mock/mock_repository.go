// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/activity/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	"github.com/golang/mock/gomock"
	activity "github.com/ndaDayo/devdev/domain/entity/activity"
)

// MockActivity is a mock of Activity interface.
type MockActivity struct {
	ctrl     *gomock.Controller
	recorder *MockActivityMockRecorder
}

// MockActivityMockRecorder is the mock recorder for MockActivity.
type MockActivityMockRecorder struct {
	mock *MockActivity
}

// NewMockActivity creates a new mock instance.
func NewMockActivity(ctrl *gomock.Controller) *MockActivity {
	mock := &MockActivity{ctrl: ctrl}
	mock.recorder = &MockActivityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActivity) EXPECT() *MockActivityMockRecorder {
	return m.recorder
}

// GetCodeActivity mocks base method.
func (m *MockActivity) GetCodeActivity(owner, repo, user string) (activity.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeActivity", owner, repo, user)
	ret0, _ := ret[0].(activity.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCodeActivity indicates an expected call of GetCodeActivity.
func (mr *MockActivityMockRecorder) GetCodeActivity(owner, repo, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeActivity", reflect.TypeOf((*MockActivity)(nil).GetCodeActivity), owner, repo, user)
}
